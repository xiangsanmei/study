{
  "name": "koa-cash",
  "description": "HTTP response caching for Koa",
  "version": "1.0.1",
  "dependencies": {
    "mz": "1",
    "bytes": "1",
    "compressible": "2",
    "stream-to-array": "2",
    "koa-is-json": "1"
  },
  "devDependencies": {
    "koa": "0",
    "mocha": "1",
    "should": "4",
    "supertest": "0",
    "lru-cache": "2",
    "istanbul-harmony": "0"
  },
  "scripts": {
    "test": "NODE_ENV=test mocha --harmony-generators --require should --reporter spec",
    "test-cov": "NODE_ENV=test node --harmony-generators ./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --require should",
    "test-travis": "NODE_ENV=test node --harmony-generators ./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha --report lcovonly -- --require should"
  },
  "author": {
    "name": "Jonathan Ong",
    "email": "me@jongleberry.com",
    "url": "http://jongleberry.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/koajs/cash"
  },
  "license": "MIT",
  "files": [
    "index.js"
  ],
  "readme": "# Koa Cash\n\n[![NPM version][npm-image]][npm-url]\n[![Build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![Dependency Status][david-image]][david-url]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n[![Gittip][gittip-image]][gittip-url]\n\nHTTP response caching for Koa.\nCaches the response based on any arbitrary store you'd like.\n\n- Handles JSON and stream bodies\n- Handles gzip compression negotiation\n- Handles 304 responses\n\n```js\napp.use(require('koa-cash')({\n  // some options\n}))\n\napp.use(function* (next) {\n  // this response is already cashed if `true` is returned,\n  // so this middleware will automatically serve this response from cache\n  if (yield* this.cashed()) return\n\n  // set the response body here,\n  // and the upstream middleware will automatically cache it\n  this.response.body = 'hello world!'\n})\n```\n\n## API\n\n### app.use(require('koa-cash')(options))\n\nOptions are:\n\n#### `maxAge`\n\nDefault max age for the cache if not set via `yield* this.cashed(maxAge)`.\n\n#### `threshold`\n\nMinimum byte size to compress response bodies. Default `1kb`.\n\n#### `hash()`\n\nA hashing function. By default, it's:\n\n```js\nfunction hash(_this) {\n  return this.request.url\n}\n```\n\n`this` is the Koa context and is also passed as an argument.\nBy default, it caches based on the URL.\n\n#### `get()`\n\nGet a value from a store. Must return a \"yieldable\", which returns the cache's value, if any.\n\n```js\nfunction get(key, maxAge) {\n  return <yieldable>\n}\n```\n\nNote that all the `maxAge` stuff must be handled by you.\nThis module makes no opinion about it.\n\n#### `set()`\n\nSet a value to a store. Must return a \"yieldable\".\n\n```js\nfunction set(key, value) {\n  return <yieldable>\n}\n```\n\n#### Example\n\nUsing a library like [lru-cache](https://github.com/isaacs/node-lru-cache),\nthough this would not quite work since it doesn't allow per-key expiration times.\n\n```js\nvar cache = require('lru-cache')({\n  maxAge: 30000 // global max age\n})\n\napp.use(require('koa-cash')({\n  get: function* (key, maxAge) {\n    return cache.get(key)\n  },\n  set: function* (key, value) {\n    cache.set(key, value)\n  }\n}))\n```\n\n### var cached = yield* this.cashed([maxAge])\n\nThis is how you enable a route to be cached.\nIf you don't call `yield* this.cashed()`,\nthen this route will not be cached nor will it attempt to serve the request from the cache.\n\n`maxAge` is the max age passed to `get()`.\n\nIf `cached` is `true`,\nthen the current request has been served from cache and __you should early `return`__.\nOtherwise, continue setting `this.response.body=` and this will cache the response.\n\n## Notes\n\n- Only `GET` and `HEAD` requests are cached.\n- Only `200` responses are cached.\n  Don't set `304` status codes on these routes - this middleware will handle it for you\n- The underlying store should be able to handle `Date` objects as well as `Buffer` objects.\n  Otherwise, you may have to serialize/deserialize yourself.\n\n[npm-image]: https://img.shields.io/npm/v/koa-cash.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/koa-cash\n[github-tag]: http://img.shields.io/github/tag/koajs/cash.svg?style=flat-square\n[github-url]: https://github.com/koajs/cash/tags\n[travis-image]: https://img.shields.io/travis/koajs/cash.svg?style=flat-square\n[travis-url]: https://travis-ci.org/koajs/cash\n[coveralls-image]: https://img.shields.io/coveralls/koajs/cash.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/koajs/cash?branch=master\n[david-image]: http://img.shields.io/david/koajs/cash.svg?style=flat-square\n[david-url]: https://david-dm.org/koajs/cash\n[license-image]: http://img.shields.io/npm/l/koa-cash.svg?style=flat-square\n[license-url]: LICENSE\n[downloads-image]: http://img.shields.io/npm/dm/koa-cash.svg?style=flat-square\n[downloads-url]: https://npmjs.org/package/koa-cash\n[gittip-image]: https://img.shields.io/gittip/jonathanong.svg?style=flat-square\n[gittip-url]: https://www.gittip.com/jonathanong/\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/koajs/cash/issues"
  },
  "_id": "koa-cash@1.0.1",
  "_from": "koa-cash@1"
}
