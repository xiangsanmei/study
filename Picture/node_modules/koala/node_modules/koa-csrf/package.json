{
  "name": "koa-csrf",
  "description": "CSRF tokens for koa",
  "version": "2.3.0",
  "author": {
    "name": "Jonathan Ong",
    "email": "me@jongleberry.com",
    "url": "http://jongleberry.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/koajs/csrf"
  },
  "dependencies": {
    "csrf": "^3.0.0"
  },
  "devDependencies": {
    "co-body": "*",
    "istanbul-harmony": "0",
    "koa": "0",
    "koa-session": "^3.1.0",
    "mocha": "*",
    "should": "*",
    "supertest": "*"
  },
  "scripts": {
    "test": "NODE_ENV=test mocha --harmony --reporter spec --require should",
    "test-cov": "NODE_ENV=test node --harmony node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --reporter dot --require should",
    "test-travis": "NODE_ENV=test node --harmony node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha --report lcovonly -- --reporter dot --require should"
  },
  "files": [
    "index.js"
  ],
  "keywords": [
    "koa",
    "csrf"
  ],
  "readme": "# Koa CSRF\n\n[![NPM version][npm-image]][npm-url]\n[![Build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![Dependency Status][david-image]][david-url]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n\nCSRF tokens for koa.\n\n## Install\n\n```\nnpm install koa-csrf\n```\n\n## API\n\nTo install, do:\n\n```js\nrequire('koa-csrf')(app, options)\n```\n\n### Options\n\nAll options are passed to [csrf-tokens](https://github.com/expressjs/csrf-tokens).\n\n### this.csrf\n\nLazily creates a CSRF token.\nCSRF tokens change on every request.\nReturns null if session is invalid.\n\n```js\napp.use(function* () {\n  this.render({\n    csrf: this.csrf\n  })\n})\n```\n\n### this.assertCSRF([body])\n\nCheck the CSRF token of a request with an optional body.\nWill throw if the CSRF token does not exist or is not valid.\n\n```js\napp.use(function* () {\n  var body = yield parse(this) // co-body or something\n  try {\n    this.assertCSRF(body)\n  } catch (err) {\n    this.status = 403\n    this.body = {\n      message: 'This CSRF token is invalid!'\n    }\n    return\n  }\n})\n```\n\n### Middleware\n\nkoa-csrf also provide a koa middleware, it is similar to `connect-csrf`.\nin most situation, you only need:\n\n```js\nvar koa = require('koa')\nvar csrf = require('koa-csrf')\nvar session = require('koa-session')\n\nvar app = koa()\napp.keys = ['session secret']\napp.use(session())\ncsrf(app)\napp.use(csrf.middleware)\n\napp.use(function* () {\n  if (this.method === 'GET') {\n    this.body = this.csrf\n  } else if (this.method === 'POST') {\n    this.status = 204\n  }\n})\n```\n\n[npm-image]: https://img.shields.io/npm/v/koa-csrf.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/koa-csrf\n[github-tag]: http://img.shields.io/github/tag/koajs/csrf.svg?style=flat-square\n[github-url]: https://github.com/koajs/csrf/tags\n[travis-image]: https://img.shields.io/travis/koajs/csrf.svg?style=flat-square\n[travis-url]: https://travis-ci.org/koajs/csrf\n[coveralls-image]: https://img.shields.io/coveralls/koajs/csrf.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/koajs/csrf?branch=master\n[david-image]: http://img.shields.io/david/koajs/csrf.svg?style=flat-square\n[david-url]: https://david-dm.org/koajs/csrf\n[license-image]: http://img.shields.io/npm/l/koa-csrf.svg?style=flat-square\n[license-url]: LICENSE\n[downloads-image]: http://img.shields.io/npm/dm/koa-csrf.svg?style=flat-square\n[downloads-url]: https://npmjs.org/package/koa-csrf\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/koajs/csrf/issues"
  },
  "_id": "koa-csrf@2.3.0",
  "_from": "koa-csrf@2"
}
