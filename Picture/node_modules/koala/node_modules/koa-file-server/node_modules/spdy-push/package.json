{
  "name": "spdy-push",
  "description": "SPDY Push helper",
  "version": "1.0.2",
  "author": {
    "name": "Jonathan Ong",
    "email": "me@jongleberry.com",
    "url": "http://jongleberry.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/jshttp/spdy-push"
  },
  "dependencies": {
    "bluebird": "^2.3.2",
    "bytes": "^2.1.0",
    "compressible": "2",
    "debug": "*",
    "destroy": "^1.0.3",
    "mime-types": "2",
    "mz": "^2.0.0",
    "native-or-bluebird": "^1.1.0",
    "raw-body": "^2.1.3",
    "spdy": "^1.32.4"
  },
  "devDependencies": {
    "raw-body": "1",
    "mocha": "2",
    "spdy": "1",
    "spdy-keys": "0",
    "istanbul": "0"
  },
  "scripts": {
    "test": "mocha",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot",
    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter dot"
  },
  "keywords": [
    "http2",
    "http",
    "spdy",
    "push"
  ],
  "files": [
    "lib"
  ],
  "main": "lib",
  "readme": "\n# spdy-push\n\n[![NPM version][npm-image]][npm-url]\n[![Build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![Dependency Status][david-image]][david-url]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n\nA SPDY Push helper to be used with [spdy](https://github.com/indutny/node-spdy).\n\n- Handles `close` events and file descriptor leaks\n- Automatically gzips\n- Automatically sets the `content-length` and `content-type` headers if it can\n- Supports pushing strings, buffers, streams, and files\n\n## Example\n\n```js\nvar spdy = require('spdy-push');\n\nrequire('spdy').createServer(require('spdy-keys'), function (req, res) {\n  if (res.isSpdy) {\n    spdy(res).push('/script.js', {\n      filename: 'public/script.js', // resolves against CWD\n    }).catch(function (err) {\n      console.error(err.stack); // log any critical errors\n    })\n  }\n\n  res.statusCode = 204;\n  res.end();\n})\n```\n\n## API\n\n### spdy(res).push([path], [options], [priority]).then( => )\n\n- `path` is the path of the object being pushed.\n  Can also be set as `options.path`.\n- `priority` is the priority between `0-7` of the push stream\n  with `7`, the default, being the lowest priority.\n  Can also be set as `options.priority`.\n- `options` are:\n  - `headers`\n  - `body` - a `String`, `Buffer`, or `Stream.Readable` body\n  - `filename` - a path to a file. Resolves against CWD.\n\nEither `options.body` or `options.filename` must be set.\n\nYou do not need to set the following headers:\n\n- `content-encoding`\n- `content-length`\n- `content-type`\n\n### .then( => )\n\nWaits until the acknowledge event.\n\n### .send().then( => )\n\nWaits until the entire stream has been flushed.\n\n[npm-image]: https://img.shields.io/npm/v/spdy-push.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/spdy-push\n[github-tag]: http://img.shields.io/github/tag/jshttp/spdy-push.svg?style=flat-square\n[github-url]: https://github.com/jshttp/spdy-push/tags\n[travis-image]: https://img.shields.io/travis/jshttp/spdy-push.svg?style=flat-square\n[travis-url]: https://travis-ci.org/jshttp/spdy-push\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/spdy-push.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/jshttp/spdy-push?branch=master\n[david-image]: http://img.shields.io/david/jshttp/spdy-push.svg?style=flat-square\n[david-url]: https://david-dm.org/jshttp/spdy-push\n[license-image]: http://img.shields.io/npm/l/spdy-push.svg?style=flat-square\n[license-url]: LICENSE\n[downloads-image]: http://img.shields.io/npm/dm/spdy-push.svg?style=flat-square\n[downloads-url]: https://npmjs.org/package/spdy-push\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jshttp/spdy-push/issues"
  },
  "_id": "spdy-push@1.0.2",
  "_from": "spdy-push@^1.0.0"
}
