{
  "name": "koa-trace",
  "description": "generic tracing for koa",
  "version": "1.0.0",
  "author": {
    "name": "Jonathan Ong",
    "email": "me@jongleberry.com",
    "url": "http://jongleberry.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/koajs/trace"
  },
  "dependencies": {
    "debug": "*"
  },
  "devDependencies": {
    "mz": "1",
    "koa": "*",
    "mocha": "1",
    "bluebird": "2"
  },
  "scripts": {
    "start": "DEBUG=koa-trace:* node --harmony-generators example.js",
    "test": "mocha --reporter spec --bail"
  },
  "readme": "\n# Koa Trace\n\nA generic tracing module.\nUse `.trace()` calls in your middleware\nand send all the data to your favorite tracer or stats aggregator\nlike jstrace, dtrace, ktap, statds, etc.\n[debug](http://github.com/visionmedia/debug) also supported!\n\n```js\napp.use(function* (next) {\n  // give each request some sort of ID\n  this.id = crypto.randomBytes(12)\n\n  // log events with optional arguments\n  this.trace('start')\n  yield* next\n  this.trace('finish')\n})\n```\n\nEnable [debug](http://github.com/visionmedia/debug) usage:\n\n```js\napp.debug()\n```\n\nNow run your app with `DEBUG=koa-trace:*` and watch the events unfold:\n\n![debug statements](assets/debug.png)\n\nYou can see the debug statements grouped by request ID.\nThen the event is shown, the time difference since the last statement,\nand the arguments passed to `.trace()`.\n\n## Background\n\nI want to add something like this to Koa,\nbut we're not sure what the best way possible is.\nPlease provide feedback on this module,\nincluding suggestions or criticisms.\nI'm sure the [debug](http://github.com/visionmedia/debug) usage\ncould use a lot of work.\n\n## Convention\n\nThere are no conventions as to how to name your `events` or what arguments\nto trace.\nThe only thing you __should__ do is create some sort of `this.id`,\neither a `Buffer` or a `String`,\nbefore you do any `.trace()` calls.\nYou will need this anyway in your logs.\n\nThis module is backend agnostic.\nThere is no possible way to support all the features of all the different backends.\nIf you want to use backend specific stuff,\nyou might as well use a module specific to it!\n\nIf you want to create a convention, let me know!\nWe can start a doc or wiki or something.\n\n## API\n\n### require('koa-trace')(app)\n\nAdd the instrumentation methods to `app`.\n\n```js\nvar app = koa()\nrequire('koa-trace')(app)\n```\n\n### this.trace(event, args...)\n\nEmit an `event` with optional arguments.\n\n```js\napp.use(function* (next) {\n  this.trace('something', 1, 2, 3)\n  yield* next\n})\n```\n\n### app.instrument(function (context, event, date, args) {})\n\nListen to all the trace calls.\n\n- `context` is the koa `this` context.\n- `event` is the traced event.\n- `date` is a `Date` instance of when the trace was called.\n  This means that you don't have to trace any of your own `Date`s.\n- `args` is an array of all the arguments passed.\n\nAny backends will need to use this method to hook into the trace calls.\n\n### app.debug()\n\nEnable all the debug logging.\nThis is not enabled by default,\nso you might want to do something like:\n\n```js\nif (process.env.NODE_ENV !== 'production') app.debug()\n```\n\nTo view all the debug logs,\nrun the node process with `DEBUG=koa-trace:*`.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/koajs/trace/issues"
  },
  "_id": "koa-trace@1.0.0",
  "_from": "koa-trace@1"
}
